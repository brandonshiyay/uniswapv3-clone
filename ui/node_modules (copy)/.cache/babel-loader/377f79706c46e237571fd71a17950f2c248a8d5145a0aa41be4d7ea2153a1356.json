{"ast":null,"code":"// We reuse instance of array, but we trie to freeze it as well,\n// so that consumers don't modify it. Maybe it's a bad idea.\nvar NO_PATH = [];\nif (typeof Object.freeze === 'function') Object.freeze(NO_PATH);\nmodule.exports = {\n  // Path search settings\n  heuristic: blindHeuristic,\n  distance: constantDistance,\n  compareFScore: compareFScore,\n  NO_PATH: NO_PATH,\n  // heap settings\n  setHeapIndex: setHeapIndex,\n  // nba:\n  setH1: setH1,\n  setH2: setH2,\n  compareF1Score: compareF1Score,\n  compareF2Score: compareF2Score\n};\nfunction blindHeuristic( /* a, b */\n) {\n  // blind heuristic makes this search equal to plain Dijkstra path search.\n  return 0;\n}\nfunction constantDistance( /* a, b */\n) {\n  return 1;\n}\nfunction compareFScore(a, b) {\n  var result = a.fScore - b.fScore;\n  // TODO: Can I improve speed with smarter ties-breaking?\n  // I tried distanceToSource, but it didn't seem to have much effect\n  return result;\n}\nfunction setHeapIndex(nodeSearchState, heapIndex) {\n  nodeSearchState.heapIndex = heapIndex;\n}\nfunction compareF1Score(a, b) {\n  return a.f1 - b.f1;\n}\nfunction compareF2Score(a, b) {\n  return a.f2 - b.f2;\n}\nfunction setH1(node, heapIndex) {\n  node.h1 = heapIndex;\n}\nfunction setH2(node, heapIndex) {\n  node.h2 = heapIndex;\n}","map":{"version":3,"names":["NO_PATH","Object","freeze","module","exports","heuristic","blindHeuristic","distance","constantDistance","compareFScore","setHeapIndex","setH1","setH2","compareF1Score","compareF2Score","a","b","result","fScore","nodeSearchState","heapIndex","f1","f2","node","h1","h2"],"sources":["/home/brandon/security/learning/defi/uniswapv3-src/uniswapv3-code/ui/node_modules/ngraph.path/a-star/defaultSettings.js"],"sourcesContent":["// We reuse instance of array, but we trie to freeze it as well,\n// so that consumers don't modify it. Maybe it's a bad idea.\nvar NO_PATH = [];\nif (typeof Object.freeze === 'function') Object.freeze(NO_PATH);\n\nmodule.exports = {\n  // Path search settings\n  heuristic: blindHeuristic,\n  distance: constantDistance,\n  compareFScore: compareFScore,\n  NO_PATH: NO_PATH,\n\n  // heap settings\n  setHeapIndex: setHeapIndex,\n\n  // nba:\n  setH1: setH1,\n  setH2: setH2,\n  compareF1Score: compareF1Score,\n  compareF2Score: compareF2Score,\n}\n\nfunction blindHeuristic(/* a, b */) {\n  // blind heuristic makes this search equal to plain Dijkstra path search.\n  return 0;\n}\n\nfunction constantDistance(/* a, b */) {\n  return 1;\n}\n\nfunction compareFScore(a, b) {\n  var result = a.fScore - b.fScore;\n  // TODO: Can I improve speed with smarter ties-breaking?\n  // I tried distanceToSource, but it didn't seem to have much effect\n  return result;\n}\n\nfunction setHeapIndex(nodeSearchState, heapIndex) {\n  nodeSearchState.heapIndex = heapIndex;\n}\n\nfunction compareF1Score(a, b) {\n  return a.f1 - b.f1;\n}\n\nfunction compareF2Score(a, b) {\n  return a.f2 - b.f2;\n}\n\nfunction setH1(node, heapIndex) {\n  node.h1 = heapIndex;\n}\n\nfunction setH2(node, heapIndex) {\n  node.h2 = heapIndex;\n}"],"mappings":"AAAA;AACA;AACA,IAAIA,OAAO,GAAG,EAAE;AAChB,IAAI,OAAOC,MAAM,CAACC,MAAM,KAAK,UAAU,EAAED,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;AAE/DG,MAAM,CAACC,OAAO,GAAG;EACf;EACAC,SAAS,EAAEC,cAAc;EACzBC,QAAQ,EAAEC,gBAAgB;EAC1BC,aAAa,EAAEA,aAAa;EAC5BT,OAAO,EAAEA,OAAO;EAEhB;EACAU,YAAY,EAAEA,YAAY;EAE1B;EACAC,KAAK,EAAEA,KAAK;EACZC,KAAK,EAAEA,KAAK;EACZC,cAAc,EAAEA,cAAc;EAC9BC,cAAc,EAAEA;AAClB,CAAC;AAED,SAASR,cAAcA,CAAA,CAAC;AAAA,EAAY;EAClC;EACA,OAAO,CAAC;AACV;AAEA,SAASE,gBAAgBA,CAAA,CAAC;AAAA,EAAY;EACpC,OAAO,CAAC;AACV;AAEA,SAASC,aAAaA,CAACM,CAAC,EAAEC,CAAC,EAAE;EAC3B,IAAIC,MAAM,GAAGF,CAAC,CAACG,MAAM,GAAGF,CAAC,CAACE,MAAM;EAChC;EACA;EACA,OAAOD,MAAM;AACf;AAEA,SAASP,YAAYA,CAACS,eAAe,EAAEC,SAAS,EAAE;EAChDD,eAAe,CAACC,SAAS,GAAGA,SAAS;AACvC;AAEA,SAASP,cAAcA,CAACE,CAAC,EAAEC,CAAC,EAAE;EAC5B,OAAOD,CAAC,CAACM,EAAE,GAAGL,CAAC,CAACK,EAAE;AACpB;AAEA,SAASP,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC5B,OAAOD,CAAC,CAACO,EAAE,GAAGN,CAAC,CAACM,EAAE;AACpB;AAEA,SAASX,KAAKA,CAACY,IAAI,EAAEH,SAAS,EAAE;EAC9BG,IAAI,CAACC,EAAE,GAAGJ,SAAS;AACrB;AAEA,SAASR,KAAKA,CAACW,IAAI,EAAEH,SAAS,EAAE;EAC9BG,IAAI,CAACE,EAAE,GAAGL,SAAS;AACrB"},"metadata":{},"sourceType":"script","externalDependencies":[]}